- 알고리즘 설계 팁
python 대신 pypy가 통상적으로 빠르다
시간제한은 대부분 1-5초 
연산횟수가 5억이 넘어가는 경우 파이썬은 보통 5-15초 소요

수행 시간이 1초일 때?
n= 500 / n^3
n= 2000 / n^2
n=100,000 / nlogn
n=10,000,000 / n

- 알고리즘 해결 과정
1. 지문 읽기 및 컴퓨터적 사고(문제 쪼개기)
2. 요구사항 분석
3. 문제 해결을 위한 아이디어 찾기
4. 소스코드 설계 및 코딩

    -> 핵심 아이디어를 캐치한다면, 간결하게 작성 가능!
    -> 알고리즘 구현을 끝내고 구현을 하자


- 지수 표현 발식
실수형 데이터
ex. 1e9 = 1,000,000,000
-> 최단 경로 알고라즘 같은 도달할 수 없는 노드에 대해 최단 거리로 설정(무한:INF)

- 실수형 데이터
정확도 한계 존재
ex. 0.3 + 0.6 != 0.9
     -> round() 함수로 명시
     -> round(123.456, 2) == 123.46

- 수 자료형 연산
나누기는 실수형으로 연산

- 배열
ex. [0] * 3 = [0, 0, 0]
append()
sort()
reverse() -> 뒤집기
insert() -> 해당인덱스에 원소를 넣기
count() -> 특정값 개수 세기
remove() -> 특정 값을 갖는 원소 제거(중복이면 하나만)

- 리스트 컴프리헨션
ex. arr = [i for i in range(20) if i % 2 == 1]

- 문자열
* 연산이나 슬라이싱 가능

- 튜플
() 사용
한번 선언되면 값 변경 불가
공간 효율적
서로 다른 성질의 데이터를 묶어서 관리할 때 좋음
해싱의 키 값으로 사용할 때

- 딕셔너리
O(1) 시간에 처리
변경 불가능한 자료형을 키로 사용

- 집합
O(1) 시간에 처리
합집합 a | b
교집합 a & b
차집합 a - b
add()
uodate() -> 새 원소 여러개 추가
remove()

- 기본 입출력
input() -> 문자열 한줄 입력받음
map() -> 리스트 모든 원소에 각각 특정 함수 적용
list(map(int, input().split()))
a, b, c = map(int, input().split())

더 빠른 방법!
sys.stdin.readline()
 -> 단, 엔터가 줄 바꿈 기호가 입력되므로 rstrip() 사용
 
 출력은 print()
 기본적으로 줄바꿈을 수행하므로 end 속성을 사용
ex. print(a, end=" ")

문자열고 수를 함께 출력
answer = 7
print(f"정답은 {answer}입니다.")

- 조건문
pass 키워드: 조건문을 만들어 놓고 조건문을 처리하는 부분을 비워놓고 싶은 경우

한줄에 작성 가능
result = "Success" if score >= 80 else "Fail"

- global 키워드
함수 바깥에서 선언된 변수 참조
전역변수로 리스트가 선언되어있을 때는 내부에서 호출 가능

- 함수
여러개의 값을 한꺼번에 return 가능

- 람다 표현식
print((lambda a, b: a + b)(3, 7))
result = map(lambda a, b: a + b, list1, list2)

- 유용한 표준 라이브러리
itertools: 순열, 조합...
heapq: 힙 자료구조
bisect: 이진 탐색
collections: deque, counter
math: 수학 기능

eval("(3+5)*7") -> 내용을 계산해줌
permutations()
combinations()
product() -> 중복 순열
combinations_with_replacement() -> 중복 조합

gcd() -> 최대 공약수
lcm() -> 최대 공배수











