1. 한 지점에서 다른 한 지점까지의 최단 경로
2. 한 지점에서 다른 모든 지점까지의 최단 경로
3. 모든 지점에서 다른 모든 지점까지의 최단 경로

- 다익스트라 알고리즘
특정한 노드에서 다른 모든 노드로 가는 최단 경로(2번)
음의 간선이 없을 때 정상적으로 동작
그리디 알고리즘 -> 매 상황에서 가장 비용이 적은 노드를 선택

(1) 출발 노드 설정
(2) 최단 거리 테이블 초기화 (모든 노드까지의 거리를 INF로)
(3) 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택
(4) 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 생성
(5) (3), (4)번을 반복

한번 처리된 노드의 최단 거리는 곶어되어 더 이상 바뀌지 않음
O(V^2)의 시간복잡도를 가짐
전체 노드 개수가 5000개 이하면 이 코드로 해결 가능
-> 10000개 이상이라면?
-> 우선순위 큐 사용
-> 힙을 사용하여 방문하지 않은 노드 중 최단 거리가 가장 짧은 노드를 선택하기 쉬움
-> (거리, 노드) 형식으로 저장하여 최소힙 사용 (노드에서 꺼낸 값이 현재 거리 테이블에 저장된 값보다 크다면 무시)
-> 힙 자료구조를 사용하면 O(ElogV)의 시간복잡도를 가짐

- 우선순위 큐
우선순위가 가장 높은 데이터를 가장 먼저 삭제
힙을 사용(최소 힙 / 최대 힙)
O(logN) 보장
heapq 사용시 -를 붙여 최대힙으로 사용 가능

- 플로이드 워셜 알고리즘
모든 노드에서 다른 모든 노드까지의 최단 경로를 모두 계산(3번)
2차원 테이블에 최단 거리 정보를 저장
다이나믹 프로그래밍 -> 3중 for문 사용
O(N^3)의 시간복잡도를 가짐


